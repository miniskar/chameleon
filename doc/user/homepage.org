#+TITLE: Chameleon
#+SUBTITLE: A dense linear algebra software for heterogeneous architectures
#+AUTHOR: HiePACS
#+EXPORT_FILE_NAME: index.html
#+LANGUAGE:  en
#+OPTIONS: H:3 num:t \n:nil @:t ::t |:t _:nil ^:nil -:t f:t *:t <:t
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil pri:nil tags:not-in-toc html-style:nil
# #+HTML_LINK_HOME: https://solverstack.gitlabpages.inria.fr/chameleon/
#+SETUPFILE: https://mfelsoci.gitlabpages.inria.fr/inria-org-html-themes/online-theme-readtheorginria.setup

* Overview
:PROPERTIES:
:CUSTOM_ID: overview
:END:
  <<sec:overview>>

  Chameleon is a framework written in C which provides routines to
  solve dense general systems of linear equations, symmetric positive
  definite systems of linear equations and linear least squares
  problems, using LU, Cholesky, QR and LQ factorizations. Real
  arithmetic and complex arithmetic are supported in both single
  precision and double precision. It supports Linux and Mac OS/X
  machines (mainly tested on Intel x86-64 and IBM Power
  architectures).  Chameleon is based on the PLASMA source code but
  is not limited to shared-memory environment and can exploit
  multiple GPUs. Chameleon is interfaced in a generic way with
  StarPU, PaRSEC, QUARK, OpenMP runtime systems. This feature allows
  to analyze in a unified framework how sequential task-based
  algorithms behave regarding different runtime systems
  implementations. Using Chameleon with StarPU runtime
  systems allows to exploit GPUs through kernels provided by cuBLAS
  and clusters of interconnected nodes with distributed memory (using
  MPI).

  Main features:
  * Written in C, Fortran interface, CMake build system
  * Algorithms: GEMM, POTRF, GETRF, GEQRF, GESVD, ...
  * Matrices forms: general, symmetric, triangular
  * Precisions: simple, double, complex, double complex

  #+ATTR_HTML: :alt DAG of Chameleon image :title DAG of Chameleon :align center :width 600px
  [[./chameleon.svg]]

* News
:PROPERTIES:
:CUSTOM_ID: news
:END:
  <<sec:news>>
#+INCLUDE: "news.org"

* Download
:PROPERTIES:
:CUSTOM_ID: download
:END:
  <<sec:download>>

  Depending on how much you need to tune the library installation we
  propose several solutions.
  1) You just want to have a try, to see if it can be installed well
     on your system, what are the performances on simple cases, run
     the examples, or simply use the last stable version: we recommand
     to use one of our packages, .deb ones for those who work on a
     Linux Debian or Ubuntu distribution, Guix or Spack on other Linux
     systems, Brew on macOS.
  2) You want to use it but you need a change somewhere in the stack
     like considering another version (git branch), change the default
     BLAS/LAPACK or MPI, use your favorite compiler, modify some
     sources: you may try with Guix or Spack because these package
     managers allow to build from sources and thus many options can be
     changed dynamically (command line), or directly build from source
     with the native build system of the library (Makefile, GNU
     autotools, CMake) following the procedures described in the
     installation guide of the library, cf. [[sec:quickstartguide]].
  3) You need a tool for reproducibility of your experiments: Guix is
     recommended.

  #+ATTR_HTML: :alt Table of download materials image :title Table of download materials :align center
  | Git       | Release source | Debian/Ubuntu | [[https://brew.sh/][Brew]] (Mac) | [[https://guix.gnu.org/en/][Guix]] (Linux) | [[https://spack.readthedocs.io/en/latest/][Spack]] (Linux/Mac) |
  |-----------+----------------+---------------+------------+--------------+-------------------|
  | [[https://gitlab.inria.fr/solverstack/chameleon][Chameleon]] | [[https://gitlab.inria.fr/api/v4/projects/616/packages/generic/source/v1.2.0/chameleon-1.2.0.tar.gz][1.2.0]]          | [[https://gitlab.inria.fr/solverstack/chameleon/-/packages][packages]]      | [[https://gitlab.inria.fr/solverstack/brew-repo][brew-repo]]  | [[https://gitlab.inria.fr/guix-hpc/guix-hpc-non-free][guix-repo]]    | [[https://github.com/spack/spack][spack-repo]]        |

  Some packages are part of the official distribution and we just
  provide the package name. For others we provide links where you can
  find either a file to install or a package recipe that can be used
  with Brew, Guix, Spack. If there are no package available for your
  distribution please [[sec:contact][contact us]] and we will try to find a solution.

  All these packages have been successfully installed and tested on
  Unix systems: *Linux* (Debian testing, Ubuntu 22.04 LTS) and *macOS*
  (Catalina).

* Quick start guide
:PROPERTIES:
:CUSTOM_ID: quickstart
:END:
  <<sec:quickstartguide>>

  Here a quick starting guide for using Chameleon.  For more
  information please refer to the [[sec:documentation][full documentation]].

** Install
:PROPERTIES:
:CUSTOM_ID: quickstart-install
:END:
   In the following we present quick examples of installation of the
   [[sec:download][packages]].
*** Release source installation with CMake
:PROPERTIES:
:CUSTOM_ID: quickstart-install-cmake
:END:
**** Linux Ubuntu 22.04
:PROPERTIES:
:CUSTOM_ID: quickstart-install-cmake-ubuntu
:END:
     Start by installing common development tools
     #+begin_src sh :eval never-export
     sudo apt-get update -y
     sudo apt-get install -y git cmake build-essential gfortran python-is-python3 wget tar curl pkg-config
     #+end_src
     - CBLAS/LAPACKE is required (OpenBLAS, Intel MKL, BLIS/FLAME, IBM
       ESSL + Reference LAPACK for cblas/lapacke interface)
     - we recommend to install StarPU as runtime system with MPI
       enabled and optionally CUDA/cuBLAS if enabled on your system
     #+begin_src sh :eval never-export
     sudo apt-get install -y libopenblas-dev liblapacke-dev libhwloc-dev libopenmpi-dev libstarpu-dev
     #+end_src
     Remarks:
     - The pair ~libopenblas-dev liblapacke-dev~ can be replaced by
       ~libmkl-dev~.
     - One can also use lib blis and flame but be sure to install a
       cblas and lapacke, from the Reference LAPACK (with CBLAS=ON,
       LAPACKE=ON), linked to blis/flame.
     - The lib essl (IBM) can also be used as BLAS/LAPACK with the
       Reference LAPACK providing cblas/lapacke.

     Then to install Chameleon from sources with CMake, proceed as follows
     #+begin_src sh :eval never-export
     wget https://gitlab.inria.fr/api/v4/projects/616/packages/generic/source/v1.2.0/chameleon-1.2.0.tar.gz
     tar xvf chameleon-1.2.0.tar.gz
     cd chameleon-1.2.0
     # or clone the master branch from the git repository to get the last version
     # git clone --recursive https://gitlab.inria.fr/solverstack/chameleon.git && cd chameleon
     mkdir build && cd build
     cmake .. -DCHAMELEON_USE_MPI=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$PWD/install
     make -j5 install
     #+end_src

     See more examples in the [[sec:ug:cmake][user's guide]].

**** macOS
:PROPERTIES:
:CUSTOM_ID: quickstart-install-macos
:END:
     Start by installing common development tools
     #+begin_src sh :eval never-export
     # install Homebrew if not already available
     /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

     # install compiler and tools
     brew install htop tmux gcc automake autoconf libtool doxygen emacs zlib bzip2 bison hwloc pkgconfig openblas openmpi

     # gcc and g++ are missing (avoid to use clang version in /usr/bin)
     ln -sf /usr/local/bin/gcc-11 /usr/local/bin/gcc
     ln -sf /usr/local/bin/g++-11 /usr/local/bin/g++

     # use pkg-config .pc files to detect some dependencies
     export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/opt/openblas/lib/pkgconfig

     # cmake checks blas.pc not openblas.pc
     sudo cp /usr/local/opt/openblas/lib/pkgconfig/openblas.pc /usr/local/opt/openblas/lib/pkgconfig/blas.pc
     #+end_src
     - CBLAS/LAPACKE is required (OpenBLAS or Intel MKL)
     - we recommend to install StarPU as runtime system with MPI
       enabled
     #+begin_src sh :eval never-export
     # install last starpu release
     cd $HOME
     wget https://files.inria.fr/starpu/starpu-1.3.10/starpu-1.3.10.tar.gz
     tar xvf starpu-1.3.10.tar.gz
     cd starpu-1.3.10
     ./configure
     make -j5
     sudo make install
     #+end_src

     Then to install Chameleon from sources with CMake, proceed as follows
     #+begin_src sh :eval never-export
     wget https://gitlab.inria.fr/api/v4/projects/616/packages/generic/source/v1.2.0/chameleon-1.2.0.tar.gz
     tar xvf chameleon-1.2.0.tar.gz
     cd chameleon-1.2.0
     # or clone from git repository
     # git clone --recursive https://gitlab.inria.fr/solverstack/chameleon.git && cd chameleon
     mkdir build && cd build
     cmake .. -DCHAMELEON_USE_MPI=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$PWD/install
     make -j5 install
     #+end_src
*** Debian/Ubuntu packages
:PROPERTIES:
:CUSTOM_ID: quickstart-install-debian-ubuntu
:END:
    Visit the [[https://gitlab.inria.fr/solverstack/chameleon/-/packages][packages]] page and download the appropriate file for your
    system. Then in a shell terminal
    #+begin_src sh :eval never-export
    # to install one of our non offical package, for example on Ubuntu 22.04
    wget https://gitlab.inria.fr/api/v4/projects/616/packages/generic/ubuntu_22.04/1.2.0/chameleon_1.2.0-1_amd64.deb
    sudo apt-get install -y ./chameleon_1.2.0-1_amd64.deb
    // and to uninstall use
    // sudo apt-get autoremove -y chameleon
    mpiexec -n 2 chameleon_dtesting -o potrf -t 2 -n 3200 --nowarmup
    #+end_src
    If there are no package available for your Debian/Ubuntu
    distribution please [[sec:contact][contact us]] and we will try to provide one.

*** Brew packages
:PROPERTIES:
:CUSTOM_ID: quickstart-install-brew
:END:
    Brew packages for macOS are stored in our [[https://gitlab.inria.fr/solverstack/brew-repo][brew-repo]] git
    repository. Please refer to the [[https://gitlab.inria.fr/solverstack/brew-repo/-/blob/master/README.org][README]] for installation
    instructions.

    Examples:
    #+begin_src sh :eval never-export
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    git clone https://gitlab.inria.fr/solverstack/brew-repo.git
    brew install --build-from-source ./brew-repo/starpu.rb
    brew install --build-from-source ./brew-repo/chameleon.rb
    #+end_src

*** Guix packages
:PROPERTIES:
:CUSTOM_ID: quickstart-install-guix
:END:
    [[https://guix.gnu.org/][Guix]] requires a running GNU/Linux system, GNU tar and Xz.
    Follow the [[https://guix.gnu.org/manual/en/html_node/Binary-Installation.html#Binary-Installation][installation instructions]]
    #+begin_src sh :eval never-export
    cd /tmp
    wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh
    chmod +x guix-install.sh
    sudo ./guix-install.sh
    #+end_src

    or on Debian
    #+begin_src sh :eval never-export
    sudo apt install guix
    #+end_src

    Guix packages are stored in our [[https://gitlab.inria.fr/guix-hpc/guix-hpc][guix-hpc]], and [[https://gitlab.inria.fr/guix-hpc/guix-hpc-non-free][guix-hpc-non-free]]
    (for versions with Intel MKL and/or CUDA) git repositories. Please
    refer to the README to see how to add our package to the list of
    Guix available packages (/i.e./ add a channel).

    The package definitions in this [[https://gitlab.inria.fr/guix-hpc/guix-hpc-non-free][repo]] extend those that come with
    Guix.  To make them visible to the guix command-line tools, create
    the ~~/.config/guix/channels.scm~ file with the following snippet to
    request the guix-hpc channel:
    #+begin_src :eval never-export
    (cons (channel
            (name 'guix-hpc-non-free)
            (url "https://gitlab.inria.fr/guix-hpc/guix-hpc-non-free.git"))
          %default-channels)
    #+end_src
    That way, ~guix pull~ will systematically pull not only Guix, but
    also Guix-HPC-non-free and Guix-HPC.
    #+begin_src sh :eval never-export
    guix pull
    #+end_src

    Then to install Chameleon last release
    #+begin_src sh
    guix install chameleon
    #+end_src

    See more examples in the [[sec:ug:guix][user's guide]].

*** Spack packages
:PROPERTIES:
:CUSTOM_ID: quickstart-install-spack
:END:
    We provide a Chameleon [[https://github.com/spack/spack][Spack]] package (with StarPU) for Linux or macOS.
    Please refer to the [[https://spack.readthedocs.io/en/latest/][documentation]] for installation instructions.

    Examples:
    #+begin_src sh :eval never-export
    # please read https://spack.readthedocs.io/en/latest/getting_started.html
    git clone https://github.com/spack/spack.git
    . spack/share/spack/setup-env.sh
    cd spack
    git checkout v0.19.1
    spack install chameleon
    # chameleon is installed here:
    spack location -i chameleon
    #+end_src
    Spack allows to expose many build variants so that it is difficult
    to ensure that all installations will succeed.

    See more examples in the [[sec:ug:spack][user's guide]].

** Linking
:PROPERTIES:
:CUSTOM_ID: quickstart-linking
:END:
   If you do not use CMake we provide a pkg-config file at
   installation in the subdirectory ~lib/pkgconfig~.
   #+begin_src sh :eval never-export
   # lets CHAMELEON_ROOT be the installation path
   export PKG_CONFIG_PATH=$CHAMELEON_ROOT/lib/pkgconfig:$PKG_CONFIG_PATH
   pkg-config --cflags chameleon
   pkg-config --libs chameleon
   pkg-config --libs --static chameleon

   export LD_LIBRARY_PATH=$CHAMELEON_ROOT/lib:$LD_LIBRARY_PATH
   #+end_src

   If you build your project with CMake we provide a
   ~CHAMELEONConfig.cmake~ file at installation, in the subdirectory
   ~lib/cmake/~ of the installation. Configure your CMake project using
   the ~CMAKE_PREFIX_PATH~
   (https://cmake.org/cmake/help/latest/envvar/CMAKE_PREFIX_PATH.html)
   as environment variable or CMake variable to give the root
   installation directory where Chameleon is installed or use the
   ~CHAMELEON_ROOT~ environment variable. Example of ~CMakeLists.txt~ for
   Chameleon
   #+begin_src :eval never-export
   project(CHAMELEON_EXAMPLE C Fortran)

   # to be able to use CHAMELEON_ROOT env. var.
   cmake_policy(SET CMP0074 NEW)

   # look for CHAMELEON on the system
   # Hint: use CHAMELEON_ROOT (env. var. or cmake var.) to the installation directory of
   # CHAMELEON if not installed in a standard path

   find_package(CHAMELEON REQUIRED)

   # compile your example

   add_executable(chameleon_example chameleon_example.c)

   # link to chameleon

   target_link_libraries(chameleon_example PRIVATE CHAMELEON::chameleon)
   #+end_src
** Using
:PROPERTIES:
:CUSTOM_ID: quickstart-using
:END:
   Considering that the ~bin/~ directory of the Chameleon installation
   is in the ~PATH~, the testing executables can be used to check main
   linear algebra operations such as 'gemm', 'potrf', 'getrf',
   'geqrf', 'gels', etc
   #+begin_src sh :eval never-export
   chameleon_stesting -H -o gemm -t 2 -m 2000 -n 2000 -k 2000
   #+end_src

   See the options with
   #+begin_src sh :eval never-export
   chameleon_stesting -h
   #+end_src

   See the available linear algebra operations with
   #+begin_src sh :eval never-export
   chameleon_stesting -o help
   #+end_src

   Remarks:
   - If using OpenBLAS multithreaded ensure to set
     ~OPENBLAS_NUM_THREADS=1~ because Chameleon handles mutithreading
     directly
   - same for Intel MKL, ensure to set ~MKL_NUM_THREADS=1~

   Here an example of linear system solving written in C through a
   Cholesky factorization on a SPD matrix with *LAPACK format*
   #+begin_src C :eval never-export
   #include <chameleon.h>
   #include <stdlib.h>
   int main(void)
   {
       size_t N; // matrix order
       size_t NRHS; // number of RHS vectors
       int NCPU; // number of cores to use
       int NGPU; // number of gpus (cuda devices) to use
       int UPLO = ChamUpper; // where is stored L

       int major, minor, patch;
       CHAMELEON_Version(&major, &minor, &patch);

       /* Linear system parameters */
       N    = 1000;
       NRHS = 10;

       /* Initialize the number of CPUs to be used with threads */
       NCPU = 2;
       NGPU = 0;

       /* Initialize CHAMELEON with main parameters */
       CHAMELEON_Init( NCPU, NGPU );

       /*
        * allocate memory for our data
        *     - matrix A                   : size N x N
        *     - set of RHS vectors B       : size N x NRHS
        *     - set of solutions vectors X : size N x NRHS
        */
       double *A    = malloc( N * N    * sizeof(double) );
       double *B    = malloc( N * NRHS * sizeof(double) );
       double *X    = malloc( N * NRHS * sizeof(double) );

       /* generate A matrix with random values such that it is spd */
       CHAMELEON_dplgsy( (double)N, ChamUpperLower, N, A, N, 51 );

       /* generate RHS */
       CHAMELEON_dplrnt( N, NRHS, B, N, 5673 );

       /* copy B in X before solving */
       memcpy(X, B, N*NRHS*sizeof(double));

       /************************************************************/
       /* solve the system AX = B using the Cholesky factorization */
       /************************************************************/

       /* Cholesky facorization:
        * A is replaced by its factorization L or L^T depending on uplo */
       CHAMELEON_dpotrf( UPLO, N, A, N );

       /* Solve:
        * B is stored in X on entry, X contains the result on exit.
        * Forward and back substitutions
        */
       CHAMELEON_dpotrs(UPLO, N, NRHS, A, N, X, N);

       /* deallocate data */
       free(A);
       free(B);
       free(X);

       /* Finalize CHAMELEON */
       CHAMELEON_Finalize();

       return EXIT_SUCCESS;
   }
   #+end_src
   In this example the LAPACK matrix is internally converted into
   Chameleon /tiled/ matrix format then task-based algorithms can be
   called. The copy operation can be costly. Please consider learning
   how to work directly with the Chameleon /tiled/ matrix format to get
   faster executions and the ability to handle distributed matrices
   over several machines. The user's data can be given in several way
   to fill the Chameleon /tiled/ matrix, see [[sec:tuto]].

   Here a simple example of linear system solving written in C through
   a Cholesky factorization on a SPD matrix with *Chameleon format*
   #+begin_src C :eval never-export
   #include <chameleon.h>
   #include <stdlib.h>
   int main(void)
   {
       size_t N; // matrix order
       size_t NRHS; // number of RHS vectors
       int NCPU; // number of cores to use
       int NGPU; // number of gpus (cuda devices) to use
       int UPLO = ChamUpper; // where is stored L

       /* descriptors necessary for calling CHAMELEON tile interface  */
       CHAM_desc_t *descA = NULL, *descB = NULL, *descX = NULL;

       int major, minor, patch;
       CHAMELEON_Version(&major, &minor, &patch);

       /* Linear system parameters */
       N    = 1000;
       NRHS = 10;

       /* Initialize the number of CPUs to be used with threads */
       NCPU = 2;
       NGPU = 0;

       /* Initialize CHAMELEON with main parameters */
       CHAMELEON_Init( NCPU, NGPU );

       /*
        * Initialize the structure required for CHAMELEON tile interface
        * CHAM_desc_t is a structure wrapping your data allowing CHAMELEON to get
        * pointers to tiles. A tile is a data subset of your matrix on which we
        * apply some optimized CPU/GPU kernels.
        * Notice that this routine suppose your matrix is a contiguous vector of
        * data (1D array), as a data you would give to BLAS/LAPACK.
        * Main arguments:
        *     - descA is a pointer to a descriptor, you need to give the address
        *     of this pointer
        *     - if you want to give your allocated matrix give its address,
        *     if not give a NULL pointer, the routine will allocate the memory
        *     and you access the matrix data with descA->mat
        *     - give the data type (ChamByte, ChamInteger, ChamRealFloat,
        *     ChamRealDouble, ChamComplexFloat, ChamComplexDouble)
        *     - number of rows in a block (tile)
        *     - number of columns in a block (tile)
        *     - number of elements in a block (tile)
        * The other parameters are specific, use:
        * CHAMELEON_Desc_Create( ... , 0, 0, number of rows, number of columns, 1, 1);
        * Have a look to the documentation for details about these parameters.
        */
       CHAMELEON_Desc_Create(&descA,  NULL, ChamRealDouble,
                         NB, NB,  NB*NB, N, N, 0, 0, N, N, 1, 1);
       CHAMELEON_Desc_Create(&descB,  NULL, ChamRealDouble,
                         NB, NB,  NB*NB, N, NRHS, 0, 0, N, NRHS, 1, 1);
       CHAMELEON_Desc_Create(&descX,  NULL, ChamRealDouble,
                         NB, NB,  NB*NB, N, NRHS, 0, 0, N, NRHS, 1, 1);

       /* generate A matrix with random values such that it is spd */
       CHAMELEON_dplgsy_Tile( (double)N, ChamUpperLower, descA, 51 );

       /* generate RHS */
       CHAMELEON_dplrnt_Tile( descB, 5673 );

       /* copy B in X before solving */
       CHAMELEON_dlacpy_Tile(ChamUpperLower, descB, descX);

       /************************************************************/
       /* solve the system AX = B using the Cholesky factorization */
       /************************************************************/

       /* Cholesky facorization:
        * A is replaced by its factorization L or L^T depending on uplo */
       CHAMELEON_dpotrf_Tile( UPLO, descA );

       /* Solve:
        * B is stored in X on entry, X contains the result on exit.
        * Forward and back substitutions
        */
       CHAMELEON_dpotrs_Tile( UPLO, descA, descX );

       /* deallocate data */
       CHAMELEON_Desc_Destroy( &descA );
       CHAMELEON_Desc_Destroy( &descB );
       CHAMELEON_Desc_Destroy( &descX );

       /* Finalize CHAMELEON */
       CHAMELEON_Finalize();

       return EXIT_SUCCESS;
   }
   #+end_src

* Documentation
:PROPERTIES:
:CUSTOM_ID: doc
:END:
  <<sec:documentation>>
#+INCLUDE: "users_guide.org"
* Tutorials
:PROPERTIES:
:CUSTOM_ID: tutorials
:END:
  <<sec:tutorials>>

  * [[sec:usetesting][Using Chameleon executables]]
  * [[sec:tuto][Tutorial LAPACK to Chameleon]]
  * [[https://fpruvost.gitlabpages.inria.fr/exa2pro/][Exa2pro: Chameleon usage on a supercomputer]]

* Contact
:PROPERTIES:
:CUSTOM_ID: contact
:END:
  <<sec:contact>>

  If you have an account on [[https://gitlab.inria.fr/][gitlab inria]] please submit a [[https://gitlab.inria.fr/solverstack/chameleon/-/issues][new issue]].

  If you don't have an account on [[https://gitlab.inria.fr/solverstack/chameleon/-/issues][gitlab inria]] you can send emails to
  [[mailto:chameleon-issues@inria.fr][chameleon-issues@inria.fr]].

  To get the news, register to the mailing list
  [[https://sympa.inria.fr/sympa/info/chameleon-announce][chameleon-announce@inria.fr]] (click on "S'abonner" on the left
  panel).

* Contributing
:PROPERTIES:
:CUSTOM_ID: contributing
:END:
#+INCLUDE: "CONTRIBUTING.org"

* Authors
:PROPERTIES:
:CUSTOM_ID: authors
:END:
 First, since the Chameleon library started as an extension of the
 PLASMA library to support multiple runtime systems, all developpers
 of the PLASMA library are developpers of the Chameleon library.

 The following people contributes to the development of Chameleon:
 * Emmanuel Agullo, PI
 * Olivier Aumage
 * Mathieu Faverge, PI
 * Nathalie Furmento
 * Hatem Ltaief
 * Gregoire Pichon
 * Florent Pruvost, PI
 * Guillaume Sylvand
 * Samuel Thibault

And many other collaborators, students, PHDs, postdoc contributes or have contributed to the library:

Cedric Augonnet, Lucas Barros de Assis, Dulceneia Becker, Raphael
Boucherie, Henricus Bouwmeester, Rocio Carratala-Saez, Cedric
Castagnede, Terry Cojean, Bilel Hadri, Azzam Haidar, Reazul Hoque,
Antoine Jego, Vijay Joshi, Matthieu Kuhn, Jakub Kurzak, Julien Langou,
Pierre Lemarinier, Alycia Lisito, Gwenole Lucas, Loris
Lucido, Piotr Luszczek, Ali M Charara, Thomas Mijieux, Lucas Nesi, The
Numerical Algorithm Group, Romain Peressoni, Mathis Rade, Marc
Sergent, Dalal Sukkari, Philippe Swartvagher, Stanimire Tomov,
Philippe Virouleau, Omar Zenati...

If we forgot your name, please let us know that we can fix that mistake.

* Citing Chameleon
:PROPERTIES:
:CUSTOM_ID: citing
:END:
Feel free to use the following publications to reference Chameleon:

  * Original paper that initiated Chameleon and the principles:
    - Agullo, Emmanuel and Augonnet, Cédric and Dongarra, Jack and
      Ltaief, Hatem and Namyst, Raymond and Thibault, Samuel and Tomov,
      Stanimire, *Faster, Cheaper, Better -- a Hybridization Methodology
      to Develop Linear Algebra Software for GPUs*, /GPU Computing Gems/,
      [[https://hal.inria.fr/inria-00547847][First Online: 17 December 2010]].
  * Design of the QR algorithms:
    - Agullo, Emmanuel and Augonnet, Cédric and Dongarra, Jack and
      Faverge, Mathieu and Ltaief, Hatem and Thibault, Samuel an
      Tomov, Stanimire, *QR Factorization on a Multicore Node Enhanced
      with Multiple GPU Accelerators*, /25th IEEE International Parallel
      & Distributed Processing Symposium/, [[https://hal.inria.fr/inria-00547614][First Online: 16 December
      2010]].
  * Design of the LU algorithms:
    - Agullo, Emmanuel and Augonnet, Cédric and Dongarra, Jack and
      Faverge, Mathieu and Langou, Julien and Ltaief, Hatem and Tomov,
      Stanimire, *LU Factorization for Accelerator-based Systems*,
      /9th ACS/IEEE International Conference on Computer Systems and
      Applications (AICCSA 11)/, [[https://hal.inria.fr/hal-00654193][First Online: 21 December 2011]].
  * Regarding distributed memory:
    - Agullo, Emmanuel and Aumage, Olivier and Faverge, Mathieu and
      Furmento, Nathalie and Pruvost, Florent and Sergent, Marc and
      Thibault, Samuel, *Achieving High Performance on Supercomputers
      with a Sequential Task-based Programming Model*, /Research Report/,
      [[https://hal.inria.fr/hal-01332774][First Online: 16 June 2016]].

* Licence
:PROPERTIES:
:CUSTOM_ID: licence
:END:
  [[https://gitlab.inria.fr/solverstack/chameleon/-/blob/master/LICENCE.txt][LICENCE]]
